Utilizzo del pattern Entity Component System.

Come funziona questo pattern? Semplicemente, al posto di avere l'oggetto che definisce direttamente, variabili, funzioni, ecc.
abbiamo una serie di componenti indipendenti che vengono raggruppati in un'entità del gioco. Questo permette di avere diverse entità
con diversi componenti e comporre questi componenti in altri più complessi. Niente ereditarietà, niente problema del diamante o 
problemi di duplice definizione di un'azione. Le entità sono dei semplici contenitori di componenti e le loro azioni sono definite in
base ai loro componenti. Un gruppo di sistemi specializzati, ognuno per componente, avrà un'array di ogni componente per fare 
l'update in modo ordinato ed evitare di avere entità sparse o che definiscono update "privati".


Il pattern che ho implementato, è statico, cioè non permette l'aggiunta/rimozione di componenti a runtime. Questo perché il gioco 
non prevede queste funzionalità, e non mi è sembrato il caso di aggiungere cose aggiuntive.


I componenti dovrebbero essere final, cioè è preferibile, nella maggior parte dei casi, la composizione di questi
ultimi piuttosto che l'ereditarietà. (ci sono ovviamente eccezioni, vedi InputComponent). I componenti come membri delle entità 
devono essere final, cioè non possono essere cambiati con componenti dello stesso tipo, ma solo modificati.

Le entità sono contenitori di componenti, quindi sono perfettamente "dinamiche" al livello di progettazione e implementazione.
Per definire un'entità statica, per esempio, posso fornirla solo del componente Position, che rappresenta la posizione nello spazio 
3D e il suo orientamento (rotazione).

I componenti sono classi simili alle struct in C, cioè dotate di soli dati e intepretati in base alla funzionalità del componente.
I componenti non hanno metodi, poiché non possono modificare i dati che contengono, nè hanno riferimenti agli altri componenti.

I sistemi sono la parte logica, cioè la parte che opera su uno o più componenti per simulare delle azioni. Un sistema che permette di
muovere tutte le entità non statiche può lavorare su tutte le entità che hanno Position, Movement e Input come componenti. Come si 
può vedere, questo sistema non richede informazioni aggiuntive sulle entità, su altri componenti o su altri sistemi. E' indipendente. 
I sistemi sono stateless, cioè non hanno variabili interne. Di solito si implementano utilizzando funzioni statiche.